= f.hm_form_errors
  
.form-group.required
  = f.label :title, class: '' do
    => icon_text
    ' Titre
  = f.text_field :title, class: 'form-control'

.form-group.required
  = f.label :visibility, class: '' do
    / => icon_interest
    ' Type
  .row
    - Event.visibilities.each do |key, value|
      .col
        => f.radio_button :visibility, key, class: "d-none button-radio-input", data: {is_visibility: key}
        = f.label :visibility, value: key, class: "button-radio" do
          => event_openess_icon(key)
          span.label-title=> event_visibility(key)

/ centre d interet
.form-group.required
  = f.label :leisures, class: '' do
    => icon_interest
    ' Loisir
  - LeisureCategory.all.order(created_at: :asc).includes(:leisures).each_slice(4) do |leisure_category_row|

    / Leisure categories ----------------------------
    .row.sm-gutter.leisure-category-row
      - leisure_category_row.each do |leisure_category|
        .col-3.sm-gutter.leisure-category_card-wrapper
          = f.label "leisure_category_id_#{leisure_category.id}", class: "leisure-category_card", data: {leisure_category: leisure_category.id} do
            span.ico class="ico-#{leisure_category.key}"
              - (1..15).each do |i|
                span class="path#{i}"
            .leisure-category_card-label=> leisure_category.title

    / Leisures ----------------------------
    - leisure_category_row.each do |leisure_category|
      .leisure-row data-leisure-row="#{leisure_category.id}"
        .leisure-row_inner
          .row.sm-gutter
            - leisure_category.leisures.each do |leisure|
              .col-6.sm-gutter
                .leisure_block
                  = f.radio_button :leisure_id, leisure.id, data: {is_leisure_input: true}
                  = f.label :leisure_id, value: leisure.id, class: "leisure_choice" do
                    span.ico> class="ico-#{leisure.key}"
                      - (1..30).each do |i|
                        span class="path#{i}"
                    .leisure_choice-label=> leisure.title
        .footer
          a.button--main data-toggle-up="#{leisure_category.id}"
            => icon_validate_reverse
            ' Valider
  
.form-group.required
  = f.label :start_at, class: '' do
    => icon_calendar
    ' Date et heure de début
  .form-row
    .col-6
      small.form-text.text-muted jj/mm/aaaa
      = f.text_field :start_date, class: 'form-control', data: {date_picker: 'start'}
    .col-5
      small.form-text.text-muted hh:mm
      = f.text_field :start_time, class: 'form-control', data: {time_picker: 'start'}
    .col-1.pt-4
      a.btn.btn-link.btn-sm.pl-0 data-date-clear="start"
        i.fa.fa-refresh

.form-group
  = f.label :end_at, class: '' do
    => icon_calendar
    ' Date et heure de fin (facultatif)
  .form-row
    .col-6
      small.form-text.text-muted jj/mm/aaaa
      = f.text_field :end_date, class: 'form-control', data: {date_picker: 'end'}
    .col-5
      small.form-text.text-muted hh:mm
      = f.text_field :end_time, class: 'form-control', data: {time_picker: 'end'}
    .col-1.pt-4
      a.btn.btn-link.btn-sm.pl-0 data-date-clear="end"
        i.fa.fa-refresh

.form-group
  = f.label :address, class: '' do
    => icon_location
    ' Adresse
  = f.text_field :address, class: 'form-control'

.form-group.required
  = f.label :city_id, class: '' do
    => icon_location
    ' Ville
  = f.select :city_id, options_for_select(single_city_options(f.object.city), f.object.city_id), {prompt: "Rechercher une ville"}, class: "form-control",  data: {is_ajax_select2: 'city', path: cities_path, width: '100%'}

.form-group
  = f.label :description, class: '' do
    => icon_text
    ' Description
  = f.hidden_field :description, class: 'form-control', data: {is_hidden_field: 'description'}
  div data-is-wysiwyg="quill"
    p= wysiwyg_text(f.object.description)

/ Nb de personnes

.form-group data-hidden-if="closed"
  = label_tag :participants do
    => icon_people
    ' Nombre de personnes max
  .range-slider-container
    = f.text_field :participants_max, data: {is_slider: 'participants'}

/ Photos
.form-group
  / .label-title  Photos de l'événement
  = f.label :pictures do
    => icon_camera
    ' Photos de l'événement
  p.form-text.text-muted.small: em 
    ' Formats autorisés : .jpeg, .png
    br
    ' Taille maximum : 8 Mo

- if f.object.new_record? 
  p Vous pourrez ajouter des photos une fois que votre événement sera créé
- else

  .picture-card_container data-is-upload-anchor=true data-list-url="#{users_event_pictures_path(f.object)}"

    .picture-card
      = label_tag :"asset_event_picture[asset]"
        span.button-upload
          = icon_add

        = file_field_tag :"asset_event_picture[asset]", accept: Asset::EventPicture::VALID_CONTENT_TYPES.map(&:to_s).join(','), data: {file_upload: true, url: users_event_pictures_path(f.object)}, class:'d-none'
        / / filtre "accept" mal géré pour certains navigateurs (dont le mien pour les doc, xls, etc)
        / = file_field_tag :"asset_event_picture[asset]", accept: Asset::EventPicture::VALID_CONTENT_TYPES.map(&:to_s).join(','), data: {file_upload: true, url: event_pictures_path(f.object), method: 'POST', type: 'script'}, style: "display:none"

/ Documents
.form-group
  = f.label :attachements do
    => icon_attachment
    ' Documents de l'événement
  p.form-text.text-muted.small: em 
    ' Formats autorisés : .pdf
    br
    ' Taille maximum : 8 Mo

- if f.object.new_record? 
  p Vous pourrez ajouter des documents liés à l'événement une fois que votre événement sera créé
- else
  .event-document_container data-is-doc-upload-anchor=true data-list-url="#{users_event_attachments_path(f.object)}"

    .event-document
      = label_tag :"asset_event_attachment[asset]"
        span.button-upload.button-upload--block
          = icon_add

        = file_field_tag :"asset_event_attachment[asset]", accept: Asset::EventAttachment::VALID_CONTENT_TYPES.map(&:to_s).join(','), data: {doc_upload: true, url: users_event_attachments_path(f.object), method: 'POST', type: 'script'}, class:'d-none'


hr
.form-group.mt-3
  = button_tag(class: "button--main") do 
    => icon_validate_reverse
    ' Ok

- unless f.object.new_record? 
  = render "events/event_pictures/hb_thumbs"
  = render "users/events/event_attachments/new"
  = render "users/events/event_attachments/hb_thumbs"

coffee:
  new EventForm()